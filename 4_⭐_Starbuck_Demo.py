import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import pydeck as pdk
import numpy as np
import time
import altair as alt
from urllib.error import URLError


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit
st.set_page_config(page_title="Starbucks World Location", page_icon="üåç")

st.markdown("# Starbucks Location")
st.sidebar.header("Filter Options")

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
file_path = r"C:\Users\Winna\DADS_tool\week11_streamlit_2\directory.csv"
data = pd.read_csv(file_path)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Latitude' ‡πÅ‡∏•‡∏∞ 'Longitude' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame
if 'Latitude' in data.columns and 'Longitude' in data.columns:
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Latitude ‡πÅ‡∏•‡∏∞ Longitude ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô float
    data['Latitude'] = pd.to_numeric(data['Latitude'], errors='coerce')
    data['Longitude'] = pd.to_numeric(data['Longitude'], errors='coerce')

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ Latitude ‡∏´‡∏£‡∏∑‡∏≠ Longitude ‡πÄ‡∏õ‡πá‡∏ô NaN
    data = data.dropna(subset=['Latitude', 'Longitude'])

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    country_list = data['Country'].unique().tolist()
    selected_country = st.selectbox("Select a country", ["All"] + country_list)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if selected_country != "All":
        data = data[data['Country'] == selected_country]

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    city_list = data['City'].unique().tolist()
    selected_city = st.selectbox("Select a city", ["All"] + city_list)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if selected_city != "All":
        data = data[data['City'] == selected_city]

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    st.write("üìã **Filtered Data**", data.head())

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ ColumnLayer
    if not data.empty:
        layer = pdk.Layer(
            'ColumnLayer',
            data=data,
            get_position=['Longitude', 'Latitude'],
            get_elevation=100,
            elevation_scale=50,
            radius=500,
            get_fill_color=[255, 0, 0, 160],
            pickable=True,
            auto_highlight=True,
        )

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà pydeck
        view_state = pdk.ViewState(
            latitude=data['Latitude'].mean(),
            longitude=data['Longitude'].mean(),
            zoom=10,
            pitch=45,
        )

        st.pydeck_chart(pdk.Deck(
            map_style='mapbox://styles/mapbox/light-v10',
            initial_view_state=view_state,
            layers=[layer],
        ))
    else:
        st.warning("No data available for the selected filters.")
else:
    st.error("The file does not contain 'Latitude' and 'Longitude' columns.")

# ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart
st.markdown("## Number of Starbucks Locations by Country")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Country' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame
if 'Country' in data.columns:
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤ Starbucks ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á)
    original_data = pd.read_csv(file_path)
    country_count = original_data['Country'].value_counts().reset_index()
    country_count.columns = ['Country', 'Count']

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart ‡∏î‡πâ‡∏ß‡∏¢ Altair
    bar_chart = alt.Chart(country_count).mark_bar().encode(
        x=alt.X('Country:N', sort='-y', title='Country'),
        y=alt.Y('Count:Q', title='Number of Locations'),
        color=alt.value('green'),
        tooltip=['Country', 'Count']
    ).properties(
        title='Number of Starbucks Locations by Country',
        width=800,
        height=400
    )

    # ‡πÅ‡∏™‡∏î‡∏á Bar Chart ‡πÉ‡∏ô Streamlit
    st.altair_chart(bar_chart, use_container_width=True)
else:
    st.error("The file does not contain a 'Country' column.")
######################################################################################

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Country' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame
if 'Country' in data.columns:
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤ Starbucks ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á)
    original_data = pd.read_csv(file_path)
    country_count = original_data['Country'].value_counts().reset_index()
    country_count.columns = ['Country', 'Count']

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart ‡∏î‡πâ‡∏ß‡∏¢ Plotly
    fig = px.bar(
        country_count,
        x='Country',
        y='Count',
        color='Count',
        color_continuous_scale='Blues',
        title='Number of Starbucks Locations by Country',
        labels={'Count': 'Number of Locations', 'Country': 'Country'},
        height=600,
    )

    # ‡πÅ‡∏™‡∏î‡∏á Bar Chart ‡πÉ‡∏ô Streamlit
    st.plotly_chart(fig, use_container_width=True)
else:
    st.error("The file does not contain a 'Country' column.")


#######################################################################################
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'City' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame
if 'City' in data.columns:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Histogram ‡∏î‡πâ‡∏ß‡∏¢ Plotly
    fig = px.histogram(
        data,
        x='City',
        nbins=30,
        title='Distribution of Starbucks Locations by City',
        labels={'City': 'City', 'count': 'Number of Locations'},
        color_discrete_sequence=['#FF5733']
    )

    # ‡πÅ‡∏™‡∏î‡∏á Histogram ‡πÉ‡∏ô Streamlit
    st.plotly_chart(fig, use_container_width=True)
else:
    st.error("The file does not contain a 'City' column.")

#####################################################################################


# ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Histogram ‡∏î‡πâ‡∏ß‡∏¢ Plotly (Top 10 Locations)
st.markdown("## Top 10 Cities with the Most Starbucks Locations")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'City' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame
if 'City' in data.columns:
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤ Starbucks ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    city_count = data['City'].value_counts().reset_index()
    city_count.columns = ['City', 'Count']

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Top 10 ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    top_10_cities = city_count.head(10)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Histogram ‡∏î‡πâ‡∏ß‡∏¢ Plotly
    fig = px.bar(
        top_10_cities,
        x='City',
        y='Count',
        color='Count',
        color_continuous_scale='Blues',
        title='Top 10 Cities with Most Starbucks Locations',
        labels={'Count': 'Number of Locations', 'City': 'City'},
        height=600,
    )

    # ‡πÅ‡∏™‡∏î‡∏á Histogram ‡πÉ‡∏ô Streamlit
    st.plotly_chart(fig, use_container_width=True)
else:
    st.error("The file does not contain a 'City' column.")

#######################################################################################

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Scatter Plot ‡∏î‡πâ‡∏ß‡∏¢ Plotly
st.markdown("## Starbucks Locations Scatter Plot")

if not data.empty:
    fig = px.scatter_mapbox(
        data,
        lat='Latitude',
        lon='Longitude',
        hover_name='Store Name',
        hover_data=['City', 'Country', 'Store Number'],
        color_discrete_sequence=['red'],
        zoom=5,
        height=600,
    )

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Mapbox
    fig.update_layout(
        mapbox_style="open-street-map",
        title='Starbucks Locations',
        margin={"r":0,"t":50,"l":0,"b":0}
    )

    # ‡πÅ‡∏™‡∏î‡∏á Scatter Plot ‡πÉ‡∏ô Streamlit
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("No data available for the selected filters.")




#######################################################################################
